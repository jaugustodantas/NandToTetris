// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant k
// if (nx == 1) sets x = !x       // bitwise not k
// if (zy == 1) sets y = 0        // 16-bit constant k
// if (ny == 1) sets y = !y       // bitwise not k
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //Setando as operações de x (zx e nx)
    Mux16(a=x[0..15] , b=false , sel=zx , out=zeroX );
    Not16(in=zeroX , out=zeroXNeg);
    Mux16(a=zeroX , b=zeroXNeg , sel=nx , out=w1 );
    //Setando as operações de x (zx e nx)
    Mux16(a=y[0..15] , b=false , sel=zy , out=zeroY );
    Not16(in=zeroY , out=zeroYNeg);
    Mux16(a=zeroY , b=zeroYNeg , sel=ny , out=w2 );
    //setando f
    //Mux16(a=w1 , b=w2 , sel=f , out=w4 );
    Add16(a =w1 , b =w2 , out =w4 );
    And16(a=w1 , b=w2 , out=w5 );
    Mux16(a=w5 , b=w4 , sel=f , out=w6 );
    //tentando acerta o no
    Not16(in=w6 , out=nw6 ); //negação de w6 para o output
    Mux16(a=w6 , b=nw6 , sel=no , out=out,out[15]=ng,out[0..7]=out0to7, out[8..15]=out8to15); //se no = 0 então negamos a saída
    //flag zr
    Or8Way (in=out0to7, out=or0to7);
    Or8Way (in=out8to15, out=or8to15);
    Or (a=or0to7, b=or8to15, out=or0to16);
    Not (in=or0to16, out=zr);

}